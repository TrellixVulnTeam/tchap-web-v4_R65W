diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/MAudioBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/MAudioBody.tsx
index 5841c03..f410ccb 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/MAudioBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/MAudioBody.tsx
@@ -22,7 +22,7 @@ import InlineSpinner from '../elements/InlineSpinner';
 import { _t } from "../../../languageHandler";
 import AudioPlayer from "../audio_messages/AudioPlayer";
 import { IMediaEventContent } from "../../../customisations/models/IMediaEventContent";
-import MFileBody from "./MFileBody";
+import MFileBody from "../../../../../../src/components/views/messages/OriginalFileBody";
 import { IBodyProps } from "./IBodyProps";
 import { PlaybackManager } from "../../../audio/PlaybackManager";
 import { isVoiceMessage } from "../../../utils/EventUtils";
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/MImageBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/MImageBody.tsx
index 87d7e41..3acc972 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/MImageBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/MImageBody.tsx
@@ -22,7 +22,7 @@ import { CSSTransition, SwitchTransition } from 'react-transition-group';
 import { logger } from "matrix-js-sdk/src/logger";
 import { ClientEvent, ClientEventHandlerMap } from "matrix-js-sdk/src/client";
 
-import MFileBody from './MFileBody';
+import MFileBody from "../../../../../../src/components/views/messages/OriginalFileBody";
 import Modal from '../../../Modal';
 import { _t } from '../../../languageHandler';
 import SettingsStore from "../../../settings/SettingsStore";
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/MStickerBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/MStickerBody.tsx
index 18d8e4d..695662a 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/MStickerBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/MStickerBody.tsx
@@ -16,7 +16,7 @@ limitations under the License.
 
 import React from 'react';
 
-import MImageBody from './MImageBody';
+import MImageBody from "../../../../../../src/components/views/messages/OriginalImageBody";
 import { BLURHASH_FIELD } from "../../../utils/image-media";
 import Tooltip from "../elements/Tooltip";
 import { IMediaEventContent } from "../../../customisations/models/IMediaEventContent";
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/MVideoBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/MVideoBody.tsx
index fefedc6..08d7790 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/MVideoBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/MVideoBody.tsx
@@ -25,7 +25,7 @@ import { mediaFromContent } from "../../../customisations/Media";
 import { BLURHASH_FIELD } from "../../../utils/image-media";
 import { IMediaEventContent } from "../../../customisations/models/IMediaEventContent";
 import { IBodyProps } from "./IBodyProps";
-import MFileBody from "./MFileBody";
+import MFileBody from "../../../../../../src/components/views/messages/OriginalFileBody";
 import { ImageSize, suggestedSize as suggestedVideoSize } from "../../../settings/enums/ImageSize";
 import RoomContext, { TimelineRenderingType } from "../../../contexts/RoomContext";
 import MediaProcessingError from './shared/MediaProcessingError';
diff --git a/node_modules/matrix-react-sdk/src/components/views/messages/MVoiceMessageBody.tsx b/node_modules/matrix-react-sdk/src/components/views/messages/MVoiceMessageBody.tsx
index 7bcefff..824fa36 100644
--- a/node_modules/matrix-react-sdk/src/components/views/messages/MVoiceMessageBody.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/messages/MVoiceMessageBody.tsx
@@ -19,8 +19,8 @@ import React from "react";
 import InlineSpinner from '../elements/InlineSpinner';
 import { _t } from "../../../languageHandler";
 import RecordingPlayback from "../audio_messages/RecordingPlayback";
-import MAudioBody from "./MAudioBody";
-import MFileBody from "./MFileBody";
+import MAudioBody from "../../../../../../src/components/views/messages/OriginalAudioBody";
+import MFileBody from "../../../../../../src/components/views/messages/OriginalFileBody";
 import MediaProcessingError from "./shared/MediaProcessingError";
 
 export default class MVoiceMessageBody extends MAudioBody {
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx
index 49295f0..1b84bed 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx
@@ -98,107 +98,10 @@ const JoinRuleSettings = ({ room, promptUpgrade, aliasWarning, onError, beforeCh
         </>,
     }];
 
-    if (roomSupportsRestricted || preferredRestrictionVersion || joinRule === JoinRule.Restricted) {
-        let upgradeRequiredPill;
-        if (preferredRestrictionVersion) {
-            upgradeRequiredPill = <span className="mx_JoinRuleSettings_upgradeRequired">
-                { _t("Upgrade required") }
-            </span>;
-        }
-
-        let description;
-        if (joinRule === JoinRule.Restricted && restrictedAllowRoomIds?.length) {
-            // only show the first 4 spaces we know about, so that the UI doesn't grow out of proportion there are lots.
-            const shownSpaces = restrictedAllowRoomIds
-                .map(roomId => cli.getRoom(roomId))
-                .filter(room => room?.isSpaceRoom())
-                .slice(0, 4);
-
-            let moreText;
-            if (shownSpaces.length < restrictedAllowRoomIds.length) {
-                if (shownSpaces.length > 0) {
-                    moreText = _t("& %(count)s more", {
-                        count: restrictedAllowRoomIds.length - shownSpaces.length,
-                    });
-                } else {
-                    moreText = _t("Currently, %(count)s spaces have access", {
-                        count: restrictedAllowRoomIds.length,
-                    });
-                }
-            }
-
-            const onRestrictedRoomIdsChange = (newAllowRoomIds: string[]) => {
-                if (!arrayHasDiff(restrictedAllowRoomIds || [], newAllowRoomIds)) return;
-
-                if (!newAllowRoomIds.length) {
-                    setContent({
-                        join_rule: JoinRule.Invite,
-                    });
-                    return;
-                }
-
-                setContent({
-                    join_rule: JoinRule.Restricted,
-                    allow: newAllowRoomIds.map(roomId => ({
-                        "type": RestrictedAllowType.RoomMembership,
-                        "room_id": roomId,
-                    })),
-                });
-            };
-
-            const onEditRestrictedClick = async () => {
-                const restrictedAllowRoomIds = await editRestrictedRoomIds();
-                if (!Array.isArray(restrictedAllowRoomIds)) return;
-                if (restrictedAllowRoomIds.length > 0) {
-                    onRestrictedRoomIdsChange(restrictedAllowRoomIds);
-                } else {
-                    onChange(JoinRule.Invite);
-                }
-            };
-
-            description = <div>
-                <span>
-                    { _t("Anyone in a space can find and join. <a>Edit which spaces can access here.</a>", {}, {
-                        a: sub => <AccessibleButton
-                            disabled={disabled}
-                            onClick={onEditRestrictedClick}
-                            kind="link_inline"
-                        >
-                            { sub }
-                        </AccessibleButton>,
-                    }) }
-                </span>
-
-                <div className="mx_JoinRuleSettings_spacesWithAccess">
-                    <h4>{ _t("Spaces with access") }</h4>
-                    { shownSpaces.map(room => {
-                        return <span key={room.roomId}>
-                            <RoomAvatar room={room} height={32} width={32} />
-                            { room.name }
-                        </span>;
-                    }) }
-                    { moreText && <span>{ moreText }</span> }
-                </div>
-            </div>;
-        } else if (SpaceStore.instance.activeSpaceRoom) {
-            description = _t("Anyone in <spaceName/> can find and join. You can select other spaces too.", {}, {
-                spaceName: () => <b>{ SpaceStore.instance.activeSpaceRoom.name }</b>,
-            });
-        } else {
-            description = _t("Anyone in a space can find and join. You can select multiple spaces.");
-        }
-
-        definitions.splice(1, 0, {
-            value: JoinRule.Restricted,
-            label: <>
-                { _t("Space members") }
-                { upgradeRequiredPill }
-            </>,
-            description,
-            // if there are 0 allowed spaces then render it as invite only instead
-            checked: joinRule === JoinRule.Restricted && !!restrictedAllowRoomIds?.length,
-        });
-    }
+    /**
+     * :TCHAP: removed all code about "restricted" sharing, which has to do with spaces.
+     * See patches/matrix-react-sdk+<version>.patch for details.
+     */
 
     const onChange = async (joinRule: JoinRule) => {
         const beforeJoinRule = content.join_rule;
