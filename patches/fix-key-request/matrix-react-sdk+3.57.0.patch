diff --git a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
index cd1b3f5..6c53ebd 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/MatrixChat.tsx
@@ -33,6 +33,8 @@ import { throttle } from "lodash";
 import { CryptoEvent } from "matrix-js-sdk/src/crypto";
 import { RoomType } from "matrix-js-sdk/src/@types/event";
 import { DecryptionError } from 'matrix-js-sdk/src/crypto/algorithms';
+//:tchap: import incoming key request handler from tchap project
+import KeyRequestHandler from '../../../../../src/lib/IncomingKeyRequestHandler';
 
 // focus-visible is a Polyfill for the :focus-visible CSS pseudo-attribute used by various components
 import 'focus-visible';
@@ -1532,6 +1534,18 @@ export default class MatrixChat extends React.PureComponent<IProps, IState> {
         cli.on(HttpApiEvent.SessionLoggedOut, () => dft.stop());
         cli.on(MatrixEventEvent.Decrypted, (e, err) => dft.eventDecrypted(e, err as DecryptionError));
 
+        //:tchap: add listener to handle incomingKeyRequest and trigger legacy verification process
+        //the one with the emoji
+        const krh = new KeyRequestHandler(cli);
+        cli.on(CryptoEvent.RoomKeyRequest, (req) => {
+            krh.handleKeyRequest(req);
+        });
+
+         cli.on(CryptoEvent.RoomKeyRequestCancellation, (req) => {
+            krh.handleKeyRequestCancellation(req);
+        });
+        //:tchap: end of tchap
+
         cli.on(ClientEvent.Room, (room) => {
             if (MatrixClientPeg.get().isCryptoEnabled()) {
                 const blacklistEnabled = SettingsStore.getValueAt(
diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
index f32f799..7c3df03 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/DevicesPanel.tsx
@@ -26,6 +26,7 @@ import DevicesPanelEntry from "./DevicesPanelEntry";
 import Spinner from "../elements/Spinner";
 import AccessibleButton from "../elements/AccessibleButton";
 import { deleteDevicesWithInteractiveAuth } from './devices/deleteDevices';
+import TchapUtils from '../../../../../../src/util/TchapUtils';
 
 interface IProps {
     className?: string;
@@ -37,6 +38,7 @@ interface IState {
     deviceLoadError?: string;
     selectedDevices: string[];
     deleting?: boolean;
+    isCrossSigningSupported?: boolean;//:tchap: add a state to detect if crossSigning is supported
 }
 
 export default class DevicesPanel extends React.Component<IProps, IState> {
@@ -52,6 +54,11 @@ export default class DevicesPanel extends React.Component<IProps, IState> {
     }
 
     public componentDidMount(): void {
+        //:tchap: Detect cross signing support once
+        TchapUtils.isCrossSigningSupportedByServer().then((isCrossSigningSupported)=>{
+            this.setState({isCrossSigningSupported: isCrossSigningSupported})
+        });
+        //:end of tchap
         this.loadDevices();
     }
 
@@ -112,6 +119,12 @@ export default class DevicesPanel extends React.Component<IProps, IState> {
     private isDeviceVerified(device: IMyDevice): boolean | null {
         try {
             const cli = MatrixClientPeg.get();
+            //:tchap: if cross signing is not supported, use the legacy device check
+            if (!this.state.isCrossSigningSupported){
+                return cli.checkDeviceTrust(cli.getUserId(), device.device_id).isVerified();
+            }
+            //:tchap: end
+            
             const deviceInfo = cli.getStoredDevice(cli.getUserId(), device.device_id);
             return this.state.crossSigningInfo.checkDeviceTrust(
                 this.state.crossSigningInfo,
