diff --git a/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx b/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx
index 45f924a..9802978 100644
--- a/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx
+++ b/node_modules/matrix-react-sdk/src/IdentityAuthClient.tsx
@@ -138,39 +138,47 @@ export default class IdentityAuthClient {
             throw e;
         }
 
+        // if (
+        //     !this.tempClient &&
+        //     !doesAccountDataHaveIdentityServer() &&
+        //     !(await doesIdentityServerHaveTerms(identityServerUrl))
+        // ) {
+        //     const { finished } = Modal.createDialog(QuestionDialog, {
+        //         title: _t("Identity server has no terms of service"),
+        //         description: (
+        //             <div>
+        //                 <p>{ _t(
+        //                     "This action requires accessing the default identity server " +
+        //                 "<server /> to validate an email address or phone number, " +
+        //                 "but the server does not have any terms of service.", {},
+        //                     {
+        //                         server: () => <b>{ abbreviateUrl(identityServerUrl) }</b>,
+        //                     },
+        //                 ) }</p>
+        //                 <p>{ _t(
+        //                     "Only continue if you trust the owner of the server.",
+        //                 ) }</p>
+        //             </div>
+        //         ),
+        //         button: _t("Trust"),
+        //     });
+        //     const [confirmed] = await finished;
+        //     if (confirmed) {
+        //         setToDefaultIdentityServer();
+        //     } else {
+        //         throw new AbortedIdentityActionError(
+        //             "User aborted identity server action without terms",
+        //         );
+        //     }
+        // }
+        // :TCHAP: no need confirmation of Terms and Conditions to set a default identity server as we trust our backend servers 
         if (
             !this.tempClient &&
-            !doesAccountDataHaveIdentityServer() &&
-            !(await doesIdentityServerHaveTerms(identityServerUrl))
+            !doesAccountDataHaveIdentityServer() 
         ) {
-            const { finished } = Modal.createDialog(QuestionDialog, {
-                title: _t("Identity server has no terms of service"),
-                description: (
-                    <div>
-                        <p>{ _t(
-                            "This action requires accessing the default identity server " +
-                        "<server /> to validate an email address or phone number, " +
-                        "but the server does not have any terms of service.", {},
-                            {
-                                server: () => <b>{ abbreviateUrl(identityServerUrl) }</b>,
-                            },
-                        ) }</p>
-                        <p>{ _t(
-                            "Only continue if you trust the owner of the server.",
-                        ) }</p>
-                    </div>
-                ),
-                button: _t("Trust"),
-            });
-            const [confirmed] = await finished;
-            if (confirmed) {
-                setToDefaultIdentityServer();
-            } else {
-                throw new AbortedIdentityActionError(
-                    "User aborted identity server action without terms",
-                );
-            }
+            setToDefaultIdentityServer();
         }
+        // end :TCHAP:
 
         // We should ensure the token in `localStorage` is cleared
         // appropriately. We already clear storage on sign out, but we'll need
diff --git a/node_modules/matrix-react-sdk/src/Terms.ts b/node_modules/matrix-react-sdk/src/Terms.ts
index bb7ebb5..7e209b8 100644
--- a/node_modules/matrix-react-sdk/src/Terms.ts
+++ b/node_modules/matrix-react-sdk/src/Terms.ts
@@ -21,6 +21,10 @@ import { logger } from "matrix-js-sdk/src/logger";
 import { MatrixClientPeg } from './MatrixClientPeg';
 import Modal from './Modal';
 import TermsDialog from "./components/views/dialogs/TermsDialog";
+import {
+    doesAccountDataHaveIdentityServer,
+    setToDefaultIdentityServer,
+} from './utils/IdentityServerUtils';
 
 export class TermsNotSignedError extends Error {}
 
@@ -77,6 +81,13 @@ export async function startTermsFlow(
     services: Service[],
     interactionCallback: TermsInteractionCallback = dialogTermsInteractionCallback,
 ) {
+    // :TCHAP: no need to go through Terms flow as we trust our backend servers 
+    if (!doesAccountDataHaveIdentityServer()) {
+        setToDefaultIdentityServer();
+    }
+    return;
+    // end :TCHAP:
+
     const termsPromises = services.map(
         (s) => MatrixClientPeg.get().getTerms(s.serviceType, s.baseUrl),
     );
