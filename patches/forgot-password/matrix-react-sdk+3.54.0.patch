diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx
index 83a8e3e..6e93b85 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/ForgotPassword.tsx
@@ -40,6 +40,7 @@ import PassphraseConfirmField from "../../views/auth/PassphraseConfirmField";
 import AccessibleButton from '../../views/elements/AccessibleButton';
 import StyledCheckbox from '../../views/elements/StyledCheckbox';
 import { ValidatedServerConfig } from '../../../utils/ValidatedServerConfig';
+import TchapUtils from '../../../../../../src/util/TchapUtils';
 
 enum Phase {
     // Show the forgot password inputs
@@ -154,11 +155,12 @@ export default class ForgotPassword extends React.Component<IProps, IState> {
         });
     }
 
-    public submitPasswordReset(email: string, password: string, logoutDevices = true): void {
+    // :TCHAP: use serverConfig passed as argument, instead of this.props.serverConfig
+    public submitPasswordReset(serverConfig: ValidatedServerConfig, email: string, password: string, logoutDevices = true): void {
         this.setState({
             phase: Phase.SendingEmail,
         });
-        this.reset = new PasswordReset(this.props.serverConfig.hsUrl, this.props.serverConfig.isUrl);
+        this.reset = new PasswordReset(serverConfig.hsUrl, serverConfig.isUrl);
         this.reset.resetPassword(email, password, logoutDevices).then(() => {
             this.setState({
                 phase: Phase.EmailSent,
@@ -191,14 +193,27 @@ export default class ForgotPassword extends React.Component<IProps, IState> {
         ev.preventDefault();
         if (this.state.currentHttpRequest) return;
 
+        /* :TCHAP: remove liveliness check, we don't know which server to use yet.
         // refresh the server errors, just in case the server came back online
         await this.handleHttpRequest(this.checkServerLiveliness(this.props.serverConfig));
+        end :TCHAP: */
 
         const allFieldsValid = await this.verifyFieldsBeforeSubmit();
         if (!allFieldsValid) {
             return;
         }
 
+        /* :TCHAP: fetch homeserver corresponding to email */
+        const serverResult = await TchapUtils.fetchHomeserverForEmail(this.state.email);
+        if (!serverResult) {
+            this.setState({
+                phase: Phase.Forgot,
+                errorText: _t('Server unavailable, overloaded, or something else went wrong.'), // reuse existing string
+            });
+            return;
+        }
+        const serverConfig = TchapUtils.makeValidatedServerConfig(serverResult);
+
         if (this.state.logoutDevices) {
             const { finished } = Modal.createDialog<[boolean]>(QuestionDialog, {
                 title: _t('Warning!'),
@@ -227,7 +242,7 @@ export default class ForgotPassword extends React.Component<IProps, IState> {
             if (!confirmed) return;
         }
 
-        this.submitPasswordReset(this.state.email, this.state.password, this.state.logoutDevices);
+        this.submitPasswordReset(serverConfig, this.state.email, this.state.password, this.state.logoutDevices);
     };
 
     private async verifyFieldsBeforeSubmit() {
@@ -313,10 +328,12 @@ export default class ForgotPassword extends React.Component<IProps, IState> {
         return <div>
             { errorText }
             { serverDeadSection }
+            { /* :TCHAP: remove server picker, we don't allow user to chose, server is assigned to each email.
             <ServerPicker
                 serverConfig={this.props.serverConfig}
                 onServerConfigChange={this.props.onServerConfigChange}
             />
+            */ }
             <form onSubmit={this.onSubmitForm}>
                 <div className="mx_AuthBody_fieldRow">
                     <EmailField
