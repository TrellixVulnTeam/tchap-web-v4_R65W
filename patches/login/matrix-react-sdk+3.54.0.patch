diff --git a/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx b/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx
index c00aa90..256e66c 100644
--- a/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx
+++ b/node_modules/matrix-react-sdk/src/components/structures/auth/Login.tsx
@@ -165,7 +165,19 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
 
     isBusy = () => this.state.busy || this.props.busy;
 
+    fetchHomeserverForEmail = async (email) => {
+        const homeServerList = SdkConfig.get()['homeserver_list'];
+        const randomHomeServer = homeServerList[ Math.floor(Math.random() * homeServerList.length) ];
+
+        const infoUrl = "/_matrix/identity/api/v1/info?medium=email&address=";
+
+        return fetch(randomHomeServer.base_url + infoUrl + email)
+            .then((response) => response.json())
+            .then(response => response.hs);
+    };
+
     onPasswordLogin = async (username, phoneCountry, phoneNumber, password) => {
+        /* :TCHAP: remove alive check, we don't have server yet todo */
         if (!this.state.serverIsAlive) {
             this.setState({ busy: true });
             // Do a quick liveliness check on the URLs
@@ -199,6 +211,48 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
             loginIncorrect: false,
         });
 
+        /* :TCHAP: fetch homeserver corresponding to email */
+        console.log("onPasswordLogin", username);
+        const serverResult = await this.fetchHomeserverForEmail(username);
+        console.log("onPasswordLogin serverResult", serverResult);
+        // todo deal with error case
+        const serverUrl = "https://matrix." + serverResult;
+
+        const homeServerList = SdkConfig.get()['homeserver_list'];
+        const findHomeServerInListByUrl = (homeserverList, url) => {
+            return homeServerList.find(homeServer => homeServer.base_url === url);
+        };
+        const findHomeServerNameFromUrl = (url) => {
+            const homeserver = findHomeServerInListByUrl(homeServerList, url);
+            return homeserver.server_name;
+        };
+        const serverName = findHomeServerNameFromUrl(serverUrl);
+
+
+        // Make a ValidatedServerConfig
+        const discoveryResult = {
+            "m.homeserver": {
+                state: "SUCCESS",
+                error: null,
+                base_url: serverUrl,
+                server_name: serverName,
+            },
+            "m.identity_server": {
+                state: "SUCCESS",
+                error: null,
+                base_url: serverUrl, // On Tchap our Identity server urls and home server urls are the same
+                server_name: serverName,
+            },
+        };
+        const validatedServerConf = AutoDiscoveryUtils.buildValidatedConfigFromDiscovery(
+            discoveryResult['m.homeserver'].server_name, discoveryResult);
+
+        // Simulate the end of the serverPicker component flow.
+        this.props.onServerConfigChange(validatedServerConf);
+
+        this.initLoginLogic(validatedServerConf);
+        /** end :TCHAP: */
+
         this.loginLogic.loginViaPassword(
             username, phoneCountry, phoneNumber, password,
         ).then((data) => {
@@ -606,10 +660,12 @@ export default class LoginComponent extends React.PureComponent<IProps, IState>
                     </h1>
                     { errorTextSection }
                     { serverDeadSection }
+                    { /* :TCHAP: remove server picker, we're going to query backend to find it
                     <ServerPicker
                         serverConfig={this.props.serverConfig}
                         onServerConfigChange={this.props.onServerConfigChange}
                     />
+                    end :TCHAP :*/}
                     { this.renderLoginComponentForFlows() }
                     { footer }
                 </AuthBody>
