diff --git a/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx b/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx
index 49295f0..1b84bed 100644
--- a/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx
+++ b/node_modules/matrix-react-sdk/src/components/views/settings/JoinRuleSettings.tsx
@@ -98,107 +98,10 @@ const JoinRuleSettings = ({ room, promptUpgrade, aliasWarning, onError, beforeCh
         </>,
     }];
 
-    if (roomSupportsRestricted || preferredRestrictionVersion || joinRule === JoinRule.Restricted) {
-        let upgradeRequiredPill;
-        if (preferredRestrictionVersion) {
-            upgradeRequiredPill = <span className="mx_JoinRuleSettings_upgradeRequired">
-                { _t("Upgrade required") }
-            </span>;
-        }
-
-        let description;
-        if (joinRule === JoinRule.Restricted && restrictedAllowRoomIds?.length) {
-            // only show the first 4 spaces we know about, so that the UI doesn't grow out of proportion there are lots.
-            const shownSpaces = restrictedAllowRoomIds
-                .map(roomId => cli.getRoom(roomId))
-                .filter(room => room?.isSpaceRoom())
-                .slice(0, 4);
-
-            let moreText;
-            if (shownSpaces.length < restrictedAllowRoomIds.length) {
-                if (shownSpaces.length > 0) {
-                    moreText = _t("& %(count)s more", {
-                        count: restrictedAllowRoomIds.length - shownSpaces.length,
-                    });
-                } else {
-                    moreText = _t("Currently, %(count)s spaces have access", {
-                        count: restrictedAllowRoomIds.length,
-                    });
-                }
-            }
-
-            const onRestrictedRoomIdsChange = (newAllowRoomIds: string[]) => {
-                if (!arrayHasDiff(restrictedAllowRoomIds || [], newAllowRoomIds)) return;
-
-                if (!newAllowRoomIds.length) {
-                    setContent({
-                        join_rule: JoinRule.Invite,
-                    });
-                    return;
-                }
-
-                setContent({
-                    join_rule: JoinRule.Restricted,
-                    allow: newAllowRoomIds.map(roomId => ({
-                        "type": RestrictedAllowType.RoomMembership,
-                        "room_id": roomId,
-                    })),
-                });
-            };
-
-            const onEditRestrictedClick = async () => {
-                const restrictedAllowRoomIds = await editRestrictedRoomIds();
-                if (!Array.isArray(restrictedAllowRoomIds)) return;
-                if (restrictedAllowRoomIds.length > 0) {
-                    onRestrictedRoomIdsChange(restrictedAllowRoomIds);
-                } else {
-                    onChange(JoinRule.Invite);
-                }
-            };
-
-            description = <div>
-                <span>
-                    { _t("Anyone in a space can find and join. <a>Edit which spaces can access here.</a>", {}, {
-                        a: sub => <AccessibleButton
-                            disabled={disabled}
-                            onClick={onEditRestrictedClick}
-                            kind="link_inline"
-                        >
-                            { sub }
-                        </AccessibleButton>,
-                    }) }
-                </span>
-
-                <div className="mx_JoinRuleSettings_spacesWithAccess">
-                    <h4>{ _t("Spaces with access") }</h4>
-                    { shownSpaces.map(room => {
-                        return <span key={room.roomId}>
-                            <RoomAvatar room={room} height={32} width={32} />
-                            { room.name }
-                        </span>;
-                    }) }
-                    { moreText && <span>{ moreText }</span> }
-                </div>
-            </div>;
-        } else if (SpaceStore.instance.activeSpaceRoom) {
-            description = _t("Anyone in <spaceName/> can find and join. You can select other spaces too.", {}, {
-                spaceName: () => <b>{ SpaceStore.instance.activeSpaceRoom.name }</b>,
-            });
-        } else {
-            description = _t("Anyone in a space can find and join. You can select multiple spaces.");
-        }
-
-        definitions.splice(1, 0, {
-            value: JoinRule.Restricted,
-            label: <>
-                { _t("Space members") }
-                { upgradeRequiredPill }
-            </>,
-            description,
-            // if there are 0 allowed spaces then render it as invite only instead
-            checked: joinRule === JoinRule.Restricted && !!restrictedAllowRoomIds?.length,
-        });
-    }
+    /**
+     * :TCHAP: removed all code about "restricted" sharing, which has to do with spaces.
+     * See patches/matrix-react-sdk+<version>.patch for details.
+     */
 
     const onChange = async (joinRule: JoinRule) => {
         const beforeJoinRule = content.join_rule;
